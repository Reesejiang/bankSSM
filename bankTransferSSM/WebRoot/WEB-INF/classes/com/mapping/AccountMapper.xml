<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.AccountMapper">
  <resultMap id="BaseResultMap" type="com.model.Account">
    <id column="account_id" jdbcType="INTEGER" property="accountId" />
    <result column="account_name" jdbcType="VARCHAR" property="accountName" />
    <result column="account_pwd" jdbcType="VARCHAR" property="accountPwd" />
    <result column="account_code" jdbcType="VARCHAR" property="accountCode" />
    <result column="account_type" jdbcType="CHAR" property="accountType" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="birthday" jdbcType="VARCHAR" property="birthday" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="create_bank" jdbcType="VARCHAR" property="createBank" />
    <result column="balance" jdbcType="DOUBLE" property="balance" />
    <result column="integral_num" jdbcType="INTEGER" property="integralNum" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    account_id, account_name, account_pwd, account_code, account_type, address, birthday, phone,
    bank_name, create_bank, balance, integral_num, status, create_time
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
    where account_id = #{accountId,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account
    where account_id = #{accountId,jdbcType=INTEGER}
  </delete>

  <insert id="insertSelective" parameterType="com.model.Account">
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        account_id,
      </if>
      <if test="accountName != null">
        account_name,
      </if>
      <if test="accountPwd != null">
        account_pwd,
      </if>
      <if test="accountCode != null">
        account_code,
      </if>
      <if test="accountType != null">
        account_type,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="createBank != null">
        create_bank,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="integralNum != null">
        integral_num,
      </if>
      <if test="status != null">
        status,
      </if>
      create_time
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="accountId != null">
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="accountName != null">
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="accountPwd != null">
        #{accountPwd,jdbcType=VARCHAR},
      </if>
      <if test="accountCode != null">
        #{accountCode,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=CHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="createBank != null">
        #{createBank,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DOUBLE},
      </if>
      <if test="integralNum != null">
        #{integralNum,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      now()
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.model.Account">
    update account
    <set>
      <if test="accountName != null">
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="accountPwd != null">
        account_pwd = #{accountPwd,jdbcType=VARCHAR},
      </if>
      <if test="accountCode != null">
        account_code = #{accountCode,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        account_type = #{accountType,jdbcType=CHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="createBank != null">
        create_bank = #{createBank,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=DOUBLE},
      </if>
      <if test="integralNum != null">
        integral_num = #{integralNum,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=CHAR},
      </if>
    </set>
    where account_id = #{accountId,jdbcType=INTEGER}
  </update>
  
  <select id="findAccountAll" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
  </select>
  
  <select id="findAccountByUnameAndPwd" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account where account_code = #{uname,jdbcType=VARCHAR} and account_pwd = #{pwd,jdbcType=VARCHAR}
  </select>
  
  <select id="findAccountByInfo" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account where status=1 
    and account_name = #{accountName,jdbcType=VARCHAR} 
    and account_code = #{accountCode,jdbcType=VARCHAR}
    <if test="uid != null">
    	and account_id = #{uid,jdbcType=INTEGER}
    </if>
  </select>
  
  <select id="findMaxAccountId" resultType="java.lang.Integer">
    select max(account_id) from account
  </select>
</mapper>